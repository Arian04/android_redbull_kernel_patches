diff --git c/arch/arm64/configs/redbull_defconfig i/arch/arm64/configs/redbull_defconfig
index d9409dbc3bc6..336f6b04b771 100644
--- c/arch/arm64/configs/redbull_defconfig
+++ i/arch/arm64/configs/redbull_defconfig
@@ -713,3 +713,6 @@ CONFIG_PANIC_ON_DATA_CORRUPTION=y
 CONFIG_CC_WERROR=y
 CONFIG_PID_IN_CONTEXTIDR=y
 CONFIG_ARM64_STRICT_BREAK_BEFORE_MAKE=y
+CONFIG_KPROBES=y
+CONFIG_HAVE_KPROBES=y
+CONFIG_KPROBE_EVENTS=y
diff --git c/drivers/Kconfig i/drivers/Kconfig
index e0866eda8bbd..7d4ab68a4aac 100644
--- c/drivers/Kconfig
+++ i/drivers/Kconfig
@@ -232,4 +232,5 @@ source "drivers/sensors/Kconfig"
 source "drivers/gpu/msm/Kconfig"
 
 source "drivers/energy_model/Kconfig"
+source "drivers/kernelsu/Kconfig"
 endmenu
diff --git c/drivers/Makefile i/drivers/Makefile
index 3765885e9dfe..099335db5471 100644
--- c/drivers/Makefile
+++ i/drivers/Makefile
@@ -206,3 +206,5 @@ rmnet-objs += $(patsubst %,net/ethernet/qualcomm/rmnet/%,\
 rmnet-$(CONFIG_QCOM_QMI_RMNET) += soc/qcom/qmi_rmnet.o
 rmnet-$(CONFIG_QCOM_QMI_DFC) += soc/qcom/dfc_qmi.o soc/qcom/dfc_qmap.o
 rmnet-$(CONFIG_QCOM_QMI_POWER_COLLAPSE) += soc/qcom/wda_qmi.o
+
+obj-$(CONFIG_KSU) += kernelsu/
diff --git c/drivers/kernelsu i/drivers/kernelsu
new file mode 120000
index 000000000000..9e51d0d62734
--- /dev/null
+++ i/drivers/kernelsu
@@ -0,0 +1 @@
+../KernelSU/kernel
\ No newline at end of file
diff --git c/fs/namespace.c i/fs/namespace.c
index 0e25713d09fa..0fdb095be677 100644
--- c/fs/namespace.c
+++ i/fs/namespace.c
@@ -1652,6 +1652,40 @@ static inline bool may_mandlock(void)
 }
 #endif
 
+static int can_umount(const struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+
+	if (flags & ~(MNT_FORCE | MNT_DETACH | MNT_EXPIRE | UMOUNT_NOFOLLOW))
+		return -EINVAL;
+	if (!may_mount())
+		return -EPERM;
+	if (path->dentry != path->mnt->mnt_root)
+		return -EINVAL;
+	if (!check_mnt(mnt))
+		return -EINVAL;
+	if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
+		return -EINVAL;
+	if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
+		return -EPERM;
+	return 0;
+}
+
+int path_umount(struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+	int ret;
+
+	ret = can_umount(path, flags);
+	if (!ret)
+		ret = do_umount(mnt, flags);
+
+	/* we mustn't call path_put() as that would clear mnt_expiry_mark */
+	dput(path->dentry);
+	mntput_no_expire(mnt);
+	return ret;
+}
+
 /*
  * Now umount can handle mount points as well as block devices.
  * This is important for filesystems which use unnamed block devices.
